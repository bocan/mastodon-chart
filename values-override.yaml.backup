---
image:
  repository: registry.cloudcauldron.io:5050/cloudcauldron/mastodon
  tag: latest
  pullPolicy: Always

mastodon:
  # create an initial administrator user; the password is autogenerated and will
  # have to be reset
  createAdmin:
    enabled: true
    username: bocan
    email: chris@cloudcauldron.io

  # available locales: https://github.com/mastodon/mastodon/blob/main/config/application.rb#L71
  local_domain: mastodon.cloudcauldron.io

  # Use of WEB_DOMAIN requires careful consideration: https://docs.joinmastodon.org/admin/config/#federation
  # You must redirect the path LOCAL_DOMAIN/.well-known/ to WEB_DOMAIN/.well-known/ as described
  # web_domain: mastodon.example.com

  s3:
    enabled: true
    access_key: "GOOG1E45TJ6G545EI6IAOXM7YP6LTTGNTHV2BDDG7A4VLMSDJZKV6N3LQOYPQ"
    access_secret: "qAIj7Urfp9J1xFJrELybcupRs8pJTeq9jX/ID7Jw"
    # you can also specify the name of an existing Secret
    # with keys AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
    existingSecret: ""
    bucket: "cloudcauldron-mastodon"
    endpoint: https://storage.googleapis.com
    hostname: storage.googleapis.com
    region: "eu-west2"
    # If you have a caching proxy, enter its base URL here.
    alias_host: ""

  # these must be set manually; autogenerated keys are rotated on each upgrade
  secrets:
    secret_key_base: "6f29d009939b6d8a21e40ad95560c05220d4ef019e7c1be969219a36e84bb2df67b4df68b4223fe261f25475482379913abd5be7dfd504a530a7156e651b227a"
    otp_secret: "b786e7eaaf286402ad6ecf0f36d52705bbc0c22c6d330afcead957c5b981dd38686f2bdbc2a010fb0c7424a8dfe56f17068ce89da94c7d4dac70ecd9f5c34152"
    vapid:
      private_key: "B0XZnD1_uP8oaF5Rerj9ho60X-aZTVLuggQhV3_APHw="
      public_key: "BN37H49LHzlkDZ_Zti_meo_ciRRpxb906Y4jx0n94EkHoYScNzr0aAt7lGiBWbFNJYnTcJUL6T3AKFBka9JLf9s="
    # you can also specify the name of an existing Secret
    # with keys SECRET_KEY_BASE and OTP_SECRET and
    # VAPID_PRIVATE_KEY and VAPID_PUBLIC_KEY
    # existingSecret: ""

  smtp:
    domain: cloudcauldron.io
    enable_starttls: auto
    from_address: mastodon@cloudcauldron.io
    login: AKIA5ALOMUZXAVMQG5BP
    openssl_verify_mode: peer
    password: BLXlD0/Lmk4QJn+n5GVFiokYSDEoFA/+KY8KK443FgLz
    port: 587
    tls: false
    server: email-smtp.eu-west-1.amazonaws.com
    existingSecret:

  web:
    port: 3000
    # -- Number of Web Pods running
    replicas: 2
    resources:
      limits:
        cpu: "1"
        memory: 1280Mi
      requests:
        cpu: 250m
        memory: 768Mi

  streaming:
    resources:
      limits:
        cpu: "500m"
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 128Mi

  sidekiq:
    workers:
      - name: scheduler
        # -- Number of threads / parallel sidekiq jobs that are executed per Pod
        concurrency: 25
        resources:
          limits:
            memory: 768Mi
          requests:
            cpu: 250m
            memory: 512Mi
        # -- Number of Pod replicas deployed by the Deployment
        replicas: 1
        # -- Sidekiq queues for Mastodon that are handled by this worker. See https://docs.joinmastodon.org/admin/scaling/#concurrency
        # See https://github.com/mperham/sidekiq/wiki/Advanced-Options#queues for how to weight queues as argument
        queues:
          - scheduler  # Make sure the scheduler queue only exists once and with a worker that has 1 replica.
      - name: all-queues
        concurrency: 50
        resources:
          limits:
            memory: 768Mi
          requests:
            cpu: 250m
            memory: 512Mi
        replicas: 2
        queues:
          - default,8
          - push,6
          - ingress,4
          - mailers,2
          - pull

ingress:
  enabled: true
  ingressClassName: nginx
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.org/client-max-body-size: 50m
    nginx.ingress.kubernetes.io/configuration-snippet: |
       more_set_headers "X-Clacks-Overhead: GNU Terry Pratchett";
  hosts:
    - host: mastodon.cloudcauldron.io
      paths:
        - path: '/'
  tls:
    - secretName: mastodon-tls
      hosts:
        - mastodon.cloudcauldron.io

elasticsearch:
  enabled: false
  # Wind this thing down as it's not really too important.

# https://github.com/bitnami/charts/tree/master/bitnami/postgresql#parameters
postgresql:
  # disable if you want to use an existing db; in which case the values below
  # must match those of that external postgres instance
  enabled: false
  postgresqlHostname: 10.16.240.5
  auth:
    database: mastodon_production
    username: postgres
    # you must set a password; the password generated by the postgresql chart will
    # be rotated on each upgrade:
    # https://github.com/bitnami/charts/tree/master/bitnami/postgresql#upgrade
    password: "gpgM1dland"
    postgresPassword: "gpgM1dland"
    # you can also specify the name of an existing Secret
    # with a key of postgres-password set to the password you want
    existingSecret: ""

#redis:
#  enabled: false
#  hostname: "10.16.241.4"
#  #password: "278d4bd8-4166-4d18-8ced-8924fb5fa339"
#  port: 6379
#  auth:
#    existingSecret: "mastodon-redis"

redis:
  enabled: true
  password: "donut"
  replica:
    replicaCount: 1

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: node_pool
                operator: In
                values:
                  - default-node-pool
          topologyKey: "kubernetes.io/hostname"
